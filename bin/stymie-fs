#!/usr/bin/env node

const file = require('../src/index');
const inquirer = require('inquirer');
const init = require('../src/init');
const jcrypt = require('jcrypt');
const util = require('../src/util');

const argv = require('yargs')
    .usage('Usage: stymie-fs <command> [options]')
    .example('stymie init', 'Installs')
    .command('init', 'Install the file directory and config file')

    .command('', '')

    .example('stymie add', 'Adds a new file')
    .command('add', 'Add a new file')

    .example('stymie cat', 'Dumps a file to stdout')
    .command('cat', 'Dump a file to stdout')

    .example('stymie edit', 'Edits a file')
    .command('edit', 'Edit a file')

    .example('stymie export', 'Exports a file')
    .command('export', 'Export a file')

    .example('stymie get', 'Retrieves a file')
    .command('get', 'Alias of `edit`')

    .example('stymie getKeys', 'Dumps all keys to stdout')
    .command('getKeys', 'Dump all keys to stdout')

    .example('stymie has', 'Checks if the file exists')
    .command('has', 'Check if the file exists')

    .example('stymie import', 'Imports a file')
    .command('import', 'Import a file')

    .example('stymie list', 'Lists all files')
    .command('list', 'List all files')
    .command('ls', 'Alias of `list`')

    .example('stymie mv', 'Renames a file')
    .command('mv', 'Rename a file')

    .example('stymie rm', 'Deletes a file')
    .command('rm', 'Delete a file')

    .example('stymie rmdir', 'Deletes a directory')
    .command('rmdir', 'Delete a directory (only if empty)')

    .help('h')
    .alias('h', 'help')
    .argv;

const command = argv._[0];
const env = process.env;
const logError = util.logError;
const logInfo = util.logInfo;
const logSuccess = util.logSuccess;
const stymieDir = util.getStymieDir();

if (command === 'init') {
    // TODO: Allow multiple installations in multiple locations?
    util.fileExists(`${stymieDir}/c`)
    .then(() => util.logWarn('Stymie already exists!'))
    .catch(init);
} else {
    util.fileExists(`${stymieDir}/c`)
    .then(configFile =>
        jcrypt.decryptFile(configFile)
        .then(gpgOptions => {
            util.setGPGOptions(JSON.parse(gpgOptions));

            switch (command) {
                case 'add':
                    file.add(argv._[1])
                    .then(() => logSuccess('Operation succeeded'))
                    .catch(logError);
                    break;

                case 'cat':
                    file.cat(argv._[1])
                    .then(data => util.logRaw(data.toString('utf8')))
                    .catch(logError);
                    break;

                case 'edit':
                case 'get':
                    file.get(argv._[1])
                    .then(logInfo)
                    .catch(logError);
                    break;

                case 'export': file._export(argv._[1]); break;

                case 'getKeys':
                    file.getKeys()
                    .then(logInfo)
                    .catch(logError);
                    break;

                case 'has':
                    file.has(argv._[1])
                    .then(key => 'Key exists')
                    .then(logInfo)
                    .catch(logError);
                    break;

                case 'import': file._import(argv._[1], argv._[2]); break;

                case 'list':
                case 'ls':
                    file.list(argv._[1])
                    .then(list => {
                        return !list.length ?
                            Promise.reject('Nothing to do here!') :
                           `Installed files: \n${list.join('\n')}`;
                    })
                    .then(logInfo)
                    .catch(logError);
                    break;

                case 'mv':
                    file.mv(argv._[1], argv._[2])
                    .then(logInfo)
                    .catch(logError);
                    break;

                case 'rm':
                    file.rm(argv._[1])
                    .then(logInfo)
                    .catch(logError);
                    break;

                case 'rmdir':
                    file.rmdir(argv._[1])
                    .then(res =>
                        res != null ?
                            'Key removed successfully' :
                            'No such thing'
                    )
                    .then(logInfo)
                    .catch(logError);
                    break;

                default: util.logError('Bad command');
            }
        })
        .catch(util.logError)
    )
    .catch(err => {
        // TODO: Canceling GPG when asking for passphrase will get here, THIS IS NOT GOOD!
        util.logWarn('It appears that stymie is not installed.\n');

        inquirer.prompt([{
            type: 'list',
            name: 'install',
            message: 'Install now?:',
            choices: [
                {name: 'Yes', value: true},
                {name: 'No', value: false}
            ]
        }], answers => {
            if (!answers.install) {
                util.logInfo('Aborting install.');
            } else {
                init();
            }
        });
    });
}

